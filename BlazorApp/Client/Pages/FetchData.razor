@page "/"
@using Statistics
@inject HttpClient Http

<PageTitle>Twitter Stats</PageTitle>

<h1>Tweet Statistics</h1>

<p>This component demonstrates fetching data from the server.</p>

<h3>Total Tweet's Processed : @count.ToString("N0")</h3>


<h2>Top Hashtags</h2>
@if (topHashtags == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Hashtag</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hashtagCount in topHashtags.OrderByDescending(x=>x.Count))
            {
                <tr>
                    <td>#@hashtagCount.Hashtag</td>
                    <td>@hashtagCount.Count.ToString("N0")</td>
                </tr>
            }
        </tbody>
    </table>

    <div>@error</div>
}

@code {
    private IEnumerable<HashtagCountDto>? topHashtags;
    private int count;
    private string error = string.Empty;

    protected override Task OnInitializedAsync()
    {
        _ = PeriodicUpdateAsync();
        return Task.CompletedTask;
    }

    /// <summary>
    /// Periodically refreshes the values displayed on the page 
    /// </summary>
    private async Task PeriodicUpdateAsync()
    {
        while(true)
        {
            try
            {
                count = await Http.GetFromJsonAsync<int>("TweetTotal");
                topHashtags = await Http.GetFromJsonAsync<IEnumerable<HashtagCountDto>>("TopHashtags");
                StateHasChanged();
            }
            catch (Exception e)
            {
                error = e.Message;
            }
            await Task.Delay(3000);
        }
    }
}
